[
  {
    "objectID": "replication_info/index.html",
    "href": "replication_info/index.html",
    "title": "Code runtimes:",
    "section": "",
    "text": "Code runtimes:\n\nAnalysis: 00:00:04\n\n\n\nSession Info:\n─ Session info ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.0 Patched (2024-04-24 r86482)\n os       macOS Sonoma 14.5\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2024-06-19\n pandoc   3.0.1 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.2   2023-12-11 [1] CRAN (R 4.4.0)\n digest        0.6.35  2024-03-11 [1] CRAN (R 4.4.0)\n evaluate      0.24.0  2024-06-10 [1] CRAN (R 4.4.0)\n fansi         1.0.6   2023-12-08 [1] CRAN (R 4.4.0)\n fastmap       1.2.0   2024-05-15 [1] CRAN (R 4.4.0)\n fs          * 1.6.4   2024-04-25 [1] CRAN (R 4.4.0)\n glue          1.7.0   2024-01-09 [1] CRAN (R 4.4.0)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.4.0)\n htmltools     0.5.8.1 2024-04-04 [1] CRAN (R 4.4.0)\n jsonlite      1.8.8   2023-12-04 [1] CRAN (R 4.4.0)\n knitr         1.47    2024-05-29 [1] CRAN (R 4.4.0)\n later         1.3.2   2023-12-06 [1] CRAN (R 4.4.0)\n lifecycle     1.0.4   2023-11-07 [1] CRAN (R 4.4.0)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.4.0)\n pillar        1.9.0   2023-03-22 [1] CRAN (R 4.4.0)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.4.0)\n processx      3.8.4   2024-03-16 [1] CRAN (R 4.4.0)\n ps            1.7.6   2024-01-18 [1] CRAN (R 4.4.0)\n quarto        1.4     2024-03-06 [1] CRAN (R 4.4.0)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.4.0)\n Rcpp          1.0.12  2024-01-09 [1] CRAN (R 4.4.0)\n rlang         1.1.4   2024-06-04 [1] CRAN (R 4.4.0)\n rmarkdown     2.26    2024-03-05 [1] CRAN (R 4.4.0)\n rprojroot     2.0.4   2023-11-05 [1] CRAN (R 4.4.0)\n rstudioapi    0.16.0  2024-03-24 [1] CRAN (R 4.4.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.4.0)\n tibble        3.2.1   2023-03-20 [1] CRAN (R 4.4.0)\n tictoc      * 1.2.1   2024-03-18 [1] CRAN (R 4.4.0)\n utf8          1.2.4   2023-10-22 [1] CRAN (R 4.4.0)\n vctrs         0.6.5   2023-12-01 [1] CRAN (R 4.4.0)\n xfun          0.45    2024-06-16 [1] CRAN (R 4.4.0)\n yaml          2.3.8   2023-12-11 [1] CRAN (R 4.4.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n\n─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Code runtimes:"
    ]
  },
  {
    "objectID": "example/example/index.html",
    "href": "example/example/index.html",
    "title": "Main analysis script",
    "section": "",
    "text": "This is an example script that will be run by render_file and logged in the logbook. This is based on knitr::spin() to let us do basic literate programming in .R scripts.\nlibrary(tidyverse, warn.conflicts = FALSE)\nlibrary(fixest)\nlibrary(tinytable)",
    "crumbs": [
      "Example",
      "Main analysis script"
    ]
  },
  {
    "objectID": "example/example/index.html#code-chunks",
    "href": "example/example/index.html#code-chunks",
    "title": "Main analysis script",
    "section": "Code chunks",
    "text": "Code chunks\n\nmean(rnorm(1000))\n\n[1] -0.005215247",
    "crumbs": [
      "Example",
      "Main analysis script"
    ]
  },
  {
    "objectID": "example/example/index.html#plots",
    "href": "example/example/index.html#plots",
    "title": "Main analysis script",
    "section": "Plots",
    "text": "Plots\n\nplot(mtcars$mpg, mtcars$hp)",
    "crumbs": [
      "Example",
      "Main analysis script"
    ]
  },
  {
    "objectID": "example/example/index.html#tables",
    "href": "example/example/index.html#tables",
    "title": "Main analysis script",
    "section": "Tables",
    "text": "Tables\n\ntinytable::tt(\n  mtcars[1:5, ], \n  caption = \"First five rows of `mtcars`\"\n)\n\n \n\n  \n    \n    \n    tinytable_8t2jw9l45hlwp04vgohi\n    \n    \n    \n    \n  \n\n  \n    \n      \n        \n        First five rows of `mtcars`\n              \n                mpg\n                cyl\n                disp\n                hp\n                drat\n                wt\n                qsec\n                vs\n                am\n                gear\n                carb\n              \n        \n        \n        \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                  2.620\n                  16.46\n                  0\n                  1\n                  4\n                  4\n                \n                \n                  21.0\n                  6\n                  160\n                  110\n                  3.90\n                  2.875\n                  17.02\n                  0\n                  1\n                  4\n                  4\n                \n                \n                  22.8\n                  4\n                  108\n                   93\n                  3.85\n                  2.320\n                  18.61\n                  1\n                  1\n                  4\n                  1\n                \n                \n                  21.4\n                  6\n                  258\n                  110\n                  3.08\n                  3.215\n                  19.44\n                  1\n                  0\n                  3\n                  1\n                \n                \n                  18.7\n                  8\n                  360\n                  175\n                  3.15\n                  3.440\n                  17.02\n                  0\n                  0\n                  3\n                  2",
    "crumbs": [
      "Example",
      "Main analysis script"
    ]
  },
  {
    "objectID": "example/example/index.html#regression",
    "href": "example/example/index.html#regression",
    "title": "Main analysis script",
    "section": "Regression",
    "text": "Regression\n\nest = feols(mpg ~ hp | cyl, mtcars)\nesttable(est)\n\n                             est\nDependent Var.:              mpg\n                                \nhp              -0.0240 (0.0153)\nFixed-Effects:  ----------------\ncyl                          Yes\n_______________ ________________\nS.E.: Clustered          by: cyl\nObservations                  32\nR2                       0.75386\nWithin R2                0.07998\n---\nSignif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1",
    "crumbs": [
      "Example",
      "Main analysis script"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Project Template",
    "section": "",
    "text": "This is a template repository that will serve as a base for research projects in the future. I’ve spent a lot of time working on my process and I think it’s a recipe for success. You should consider using this.\n\n\n\n\n./\n├── README.md\n├── .nojekyll\n└── .gitignore\nThe base directory contains a README that shows up on the front page of the Github repository. A template is included at the bottom of the readme I include links to the pdf, the abstract, .bib citation, and detail the replication process.\nThe .gitignore prevents you from comitting a lot of files that are useless (e.g. latex auxiliary files). .nojekyll is for publishing logbook/ with github pages.\n\n\n\ncode/\n├── folder/\n├── utils/\n└── main.R\nAll code goes into the code/ folder. The main.R script runs all the analysis using render_file which will create logs in to the logbook/. Remember that folders are your friend (e.g. process_raw/, create_main_data/, simulations/, etc.).\n\n\n\ndata/\n├── base/\n├── derived/\n└── raw/\nThe data folder is broken into three root folders. The raw/ folder should be untouched data separated into sub-folders. Each sub-folder should contain a README.md with details of how the data was accessed. Once the raw data is cleaned/processed, it will output into base/. Then, combining the datasets will end up in derived/.\nIf you are using large datasets that do not work with normal git commits, here’s my strategy: 1. Put the data/ folder in cloud storage and then create a symlink to this project folder (h/t Santiago Hermo)\nThis would look like ln -s ~/Dropbox/Project/data/ ~/project_path/data/. 2. Add only the large datasets to .gitignore so that you never commit them. You should document well how to download the data in raw; potentially including a script to do so.\n\n\n\nThis folder contains everything needed to create the paper and slides. I put figures/ and tables/ inside of out/ so that the tex files can reference them directly. This makes uploading to arXiv and submitting the paper easy since everything is in out/\nThe latex files use my templates from kylebutts/latex-templates.\nout/\n├── figures/\n├── tables/\n├── Paper.tex\n├── Paper.pdf\n├── Slides.tex\n├── Slides.pdf\n├── paper.sty\n├── slides.sty\n├── math.sty\n└── references.bib\n\n\n\nlogbook/\n├── _quarto.yml\n├── render_file.R\n└── include/\n    ├── cell-output.scss\n    ├── copy_readme.R\n    └── toggle-code.html\nThe logbook creates an quarto website with rendered output of all code used in main.R. This makes collaboration easy, as you can view all output of scripts in the logbook. Also ensures replicability. See kylebutts/repro_project for details.\nGithub actions can be setup to automatically publish logbook/ via github pages. See .github/workflows/publish_logbook.yml which updates the lobook everytime a commit is pushed. Note this does not run main.R, so logbook is only up to date if you rerun everything before committing.\n\nTo initialize, you need to run (only one time).\ncd logbook/\nquarto publish gh-pages/\n\n\n\n\n\nGithub has a way of marking certain commits as a “Release”: https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases - This let’s you mark a commit as a completed draft. I recommend doing a release every time you put a new version of the paper on arXiv. You have to make a tag before releasing. I put the tag as v# to match arXiv, but you can put anything"
  },
  {
    "objectID": "index.html#project-setup",
    "href": "index.html#project-setup",
    "title": "Research Project Template",
    "section": "",
    "text": "./\n├── README.md\n├── .nojekyll\n└── .gitignore\nThe base directory contains a README that shows up on the front page of the Github repository. A template is included at the bottom of the readme I include links to the pdf, the abstract, .bib citation, and detail the replication process.\nThe .gitignore prevents you from comitting a lot of files that are useless (e.g. latex auxiliary files). .nojekyll is for publishing logbook/ with github pages.\n\n\n\ncode/\n├── folder/\n├── utils/\n└── main.R\nAll code goes into the code/ folder. The main.R script runs all the analysis using render_file which will create logs in to the logbook/. Remember that folders are your friend (e.g. process_raw/, create_main_data/, simulations/, etc.).\n\n\n\ndata/\n├── base/\n├── derived/\n└── raw/\nThe data folder is broken into three root folders. The raw/ folder should be untouched data separated into sub-folders. Each sub-folder should contain a README.md with details of how the data was accessed. Once the raw data is cleaned/processed, it will output into base/. Then, combining the datasets will end up in derived/.\nIf you are using large datasets that do not work with normal git commits, here’s my strategy: 1. Put the data/ folder in cloud storage and then create a symlink to this project folder (h/t Santiago Hermo)\nThis would look like ln -s ~/Dropbox/Project/data/ ~/project_path/data/. 2. Add only the large datasets to .gitignore so that you never commit them. You should document well how to download the data in raw; potentially including a script to do so.\n\n\n\nThis folder contains everything needed to create the paper and slides. I put figures/ and tables/ inside of out/ so that the tex files can reference them directly. This makes uploading to arXiv and submitting the paper easy since everything is in out/\nThe latex files use my templates from kylebutts/latex-templates.\nout/\n├── figures/\n├── tables/\n├── Paper.tex\n├── Paper.pdf\n├── Slides.tex\n├── Slides.pdf\n├── paper.sty\n├── slides.sty\n├── math.sty\n└── references.bib\n\n\n\nlogbook/\n├── _quarto.yml\n├── render_file.R\n└── include/\n    ├── cell-output.scss\n    ├── copy_readme.R\n    └── toggle-code.html\nThe logbook creates an quarto website with rendered output of all code used in main.R. This makes collaboration easy, as you can view all output of scripts in the logbook. Also ensures replicability. See kylebutts/repro_project for details.\nGithub actions can be setup to automatically publish logbook/ via github pages. See .github/workflows/publish_logbook.yml which updates the lobook everytime a commit is pushed. Note this does not run main.R, so logbook is only up to date if you rerun everything before committing.\n\nTo initialize, you need to run (only one time).\ncd logbook/\nquarto publish gh-pages/"
  },
  {
    "objectID": "index.html#tags-and-releases",
    "href": "index.html#tags-and-releases",
    "title": "Research Project Template",
    "section": "",
    "text": "Github has a way of marking certain commits as a “Release”: https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases - This let’s you mark a commit as a completed draft. I recommend doing a release every time you put a new version of the paper on arXiv. You have to make a tag before releasing. I put the tag as v# to match arXiv, but you can put anything"
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Research Project Template",
    "section": "Abstract",
    "text": "Abstract\n…"
  },
  {
    "objectID": "index.html#replication",
    "href": "index.html#replication",
    "title": "Research Project Template",
    "section": "Replication",
    "text": "Replication\n…"
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Research Project Template",
    "section": "Citation",
    "text": "Citation\n@techreport{key,\n  title={TITLE},\n  author={Butts, Kyle},\n  year={2024}\n}"
  }
]